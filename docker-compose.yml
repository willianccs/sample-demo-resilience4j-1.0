version: "3.8"

services:
  resilience4j-demo:
    build:
      context: .
      dockerfile: Dockerfile
      network: host
    ports:
      - "9080:9080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - backend-network
    restart: always

  tester:
    image: alpine
    networks:
      - backend-network
    depends_on:
      - resilience4j-demo
    command: >
      sh -c "
        apk add --no-cache curl &&
        echo 'Simulando Sucesso' &&
        curl -s http://resilience4j-demo:9080/backendA/success &&
        echo 'Simulando Falhas' &&
        for i in 1 2 3 4; do
          curl -s http://resilience4j-demo:9080/backendA/failure;
        done &&
        echo 'Verificando Eventos' &&
        curl -s http://resilience4j-demo:9080/actuator/circuitbreakerevents &&
        echo 'Testando Fallback' &&
        curl -s http://resilience4j-demo:9080/backendA/fallback &&
        echo 'Retornando ao Estado Fechado' &&
        for i in 1 2 3; do
          curl -s http://resilience4j-demo:9080/backendA/success;
        done
      "
    restart: always

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    depends_on:
      - resilience4j-demo
    ports:
      - 9090:9090
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - backend-network

  grafana:
    container_name: grafana
    image: grafana/grafana
    user: "472"
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./docker/grafana/grafana.env
    networks:
      - backend-network

networks:
  backend-network:
    driver: bridge

volumes:
  prometheus_data: {}
  grafana_data: {}
